[{"C:\\Users\\aclos\\Documents\\oga2\\src\\index.tsx":"1","C:\\Users\\aclos\\Documents\\oga2\\src\\App.tsx":"2","C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\DashboardPage.tsx":"3","C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\HomePage.tsx":"4","C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\AboutPage.tsx":"5","C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\ResultsPage.tsx":"6","C:\\Users\\aclos\\Documents\\oga2\\src\\utils\\getClosestStation.ts":"7","C:\\Users\\aclos\\Documents\\oga2\\src\\components\\DeviceLocation.tsx":"8","C:\\Users\\aclos\\Documents\\oga2\\src\\components\\TextEntry.tsx":"9","C:\\Users\\aclos\\Documents\\oga2\\src\\components\\DisplayFrostDates.tsx":"10","C:\\Users\\aclos\\Documents\\oga2\\src\\utils\\getUserElevation.ts":"11","C:\\Users\\aclos\\Documents\\oga2\\src\\utils\\getCoordinates.ts":"12"},{"size":441,"mtime":1606836355131,"results":"13","hashOfConfig":"14"},{"size":1274,"mtime":1606837486418,"results":"15","hashOfConfig":"14"},{"size":815,"mtime":1606836355132,"results":"16","hashOfConfig":"14"},{"size":3252,"mtime":1606836355133,"results":"17","hashOfConfig":"14"},{"size":3555,"mtime":1606836355132,"results":"18","hashOfConfig":"14"},{"size":9971,"mtime":1606838477471,"results":"19","hashOfConfig":"14"},{"size":4121,"mtime":1606837486430,"results":"20","hashOfConfig":"14"},{"size":2445,"mtime":1606836355022,"results":"21","hashOfConfig":"14"},{"size":5031,"mtime":1606837486419,"results":"22","hashOfConfig":"14"},{"size":2100,"mtime":1606836355022,"results":"23","hashOfConfig":"14"},{"size":808,"mtime":1606836355136,"results":"24","hashOfConfig":"14"},{"size":3675,"mtime":1606836355136,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1df6bq9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\aclos\\Documents\\oga2\\src\\index.tsx",[],[],"C:\\Users\\aclos\\Documents\\oga2\\src\\App.tsx",[],"C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\DashboardPage.tsx",[],"C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\HomePage.tsx",[],"C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\AboutPage.tsx",[],"C:\\Users\\aclos\\Documents\\oga2\\src\\pages\\ResultsPage.tsx",["57"],"\r\nimport { IonPage, IonHeader, IonLoading, IonToolbar, IonTitle, IonContent, IonButtons, IonPopover, IonButton, IonIcon } from '@ionic/react';\r\nimport { arrowBack, helpCircle } from 'ionicons/icons';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { getClosestStationList, Station, getFrostData, FrostData } from '../utils/getClosestStation';\r\nimport React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\nimport './ResultsPage.css';\r\nimport DisplayFrostDates from '../components/DisplayFrostDates';\r\n\r\nconst METERS_TO_FEET = 3.28084;\r\nconst KM_TO_MILES = 0.621371;\r\nconst IGNORE_WORDS = ['HCN', 'N', 'E', 'S', 'W', 'NE', 'NW', 'SE', 'SW', 'NNE', 'NNW', 'SSE', 'SSW', 'ENE', 'WNW', 'ESE', 'WSW'];\r\n\r\ntype ContainerProps = RouteComponentProps<{\r\n    id: string;\r\n}>\r\n\r\ninterface FrostDatesJulian {\r\n  light: string;\r\n  moderate: string;\r\n  severe: string;\r\n} \r\ninterface FrostDates {\r\n  light: string;\r\n  moderate: string;\r\n  severe: string;\r\n}\r\ninterface StationUsed {\r\n  stationID: string;\r\n  lat: number;\r\n  long: number;\r\n  elevation: number;\r\n  state: string;\r\n  city: string;\r\n  distance: number;\r\n}\r\n\r\nexport interface FrostDatesBySeverity {\r\n  title: string;\r\n  springFrost: string;\r\n  fallFrost: string;\r\n  frostFree: string;\r\n}\r\n\r\nconst ResultsPage: React.FC<ContainerProps> = ({ match, history }) => { \r\n  const [stationID, setStation] = useState<StationUsed>({stationID: '0', lat: 0, long: 0, elevation: 0, state: '0', city: '0', distance: 0});\r\n  const [springFrostJulian, setSpringFrostJulian] = useState<FrostDates>({light: '0', moderate: '0', severe: '0'});\r\n  const [fallFrostJulian, setFallFrostJulian] = useState<FrostDates>({light: '0', moderate: '0', severe: '0'});\r\n  const [frostFreeJulian, setFrostFreeJulian] = useState<FrostDatesJulian>({light: '0', moderate: '0', severe: '0'});\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [showPopover, setShowPopover] = useState(false);\r\n  const [userElevation, setUserElevation] = useState<number>(0);\r\n    \r\n  // fetches frost dates after station ID updates (from history URL)\r\n  useEffect( () => {\r\n    const userLatLongElev = match.params.id;\r\n    //split out the lat/long\r\n    const values = userLatLongElev.split(',');\r\n    const lat: string = values[0];\r\n    const long: string = values[1];\r\n    const elevation: string = values[2];\r\n\r\n    let stationIdx = -1;\r\n\r\n    //make sure these values are not null or undefined\r\n    if(lat && long) {\r\n      //get a list of stations sorted by distance from the user.\r\n      const closestStation: Station[] | null = getClosestStationList({lat: parseFloat(lat), long: parseFloat(long)});\r\n      //Set elevation\r\n      if(elevation) { setUserElevation(parseFloat(elevation)); }\r\n      if(closestStation) {\r\n        //get frost data list\r\n        const frostData: FrostData[] = getFrostData();\r\n        //loop until a station with data is found, not all climate normals weather stations contain the frost data we're looking for\r\n        for(let checking = 0; checking < closestStation.length; checking++) {\r\n          //compare the two lists to see if the station ID exists in both\r\n          stationIdx = frostData.findIndex(o => o.station === closestStation[checking].station);\r\n          if(stationIdx >= 0) {  //matching station was found, stop checking, populate station information\r\n            setStation({\r\n              stationID: closestStation[checking].station,\r\n              lat: closestStation[checking].latitude,\r\n              long: closestStation[checking].longitude,\r\n              elevation: closestStation[checking].elevation * METERS_TO_FEET,\r\n              state: closestStation[checking].state,\r\n              city: closestStation[checking].city, \r\n              distance: closestStation[checking].distance * KM_TO_MILES\r\n            });\r\n            checking = closestStation.length; \r\n          }\r\n        }\r\n        setLoading(true);\r\n        //populate the frost data variables with data from the closest station\r\n        setFallFrostJulian({\r\n          severe: frostData[stationIdx].fst_t24fp30,\r\n          moderate: frostData[stationIdx].fst_t28fp30,\r\n          light: frostData[stationIdx].fst_t32fp30\r\n        });\r\n        setSpringFrostJulian({\r\n          severe: frostData[stationIdx].lst_t24fp30,\r\n          moderate: frostData[stationIdx].lst_t28fp30,\r\n          light: frostData[stationIdx].lst_t32fp30\r\n        });\r\n        setFrostFreeJulian({\r\n          severe: frostData[stationIdx].gsl_t24fp30,\r\n          moderate: frostData[stationIdx].gsl_t28fp30,\r\n          light: frostData[stationIdx].gsl_t32fp30\r\n        });\r\n        setLoading(false);\r\n      }\r\n      else { alert('Error: The station list is empty!');}\r\n    }\r\n  }, [match.params.id]);\r\n    \r\n  //these two helper functions are for styling purposes. To convert negative/positive lat and long\r\n  //to North, East, South, or West\r\n  const isLatPositive = () => {\r\n    if(stationID.lat >= 0) { return 'N'; }\r\n    else { return 'S';}\r\n  };\r\n  const isLongPositive = () => {\r\n    if(stationID.long >= 0) { return 'E'; }\r\n    else { return 'W';}\r\n  };\r\n  //this function makes sure only the first letter of each word remains capitalized and removes extraneous spaces at the end of the string\r\n  //the function also checks for certain words to omit and for some abbreviations to expand.\r\n  const stringUpper = () => {\r\n    const upWords = stationID.city.split(' ');\r\n    for (let i = 0; i < upWords.length; i++) {\r\n      if(upWords[i] !== undefined && upWords[i] && upWords[i] !== ' ') {\r\n        //Spell out words like \"Airport\", \"Center,\" \"Field,\" etc.\r\n        if(upWords[i] === 'AP') { upWords[i] = 'Airport '; }\r\n        else if (upWords[i] === 'FLD') {upWords[i] = 'Field ';}\r\n        else if (upWords[i] === 'STN') {upWords[i] = 'Station ';}\r\n        else if (upWords[i] === 'CTR') {upWords[i] = 'Center ';}\r\n        //check for special ignored words (N, E, S, W, HCN, etc)\r\n        else if(IGNORE_WORDS.indexOf(upWords[i]) >= 0) { upWords[i] = '';}\r\n        //check for 'Mc' or 'De'\r\n        else if(upWords[i][0] && upWords[i][1] && upWords[i][2]) {\r\n          if((upWords[i][0] === 'M' && upWords[i][1] === 'C') || (upWords[i][0] === 'D' && upWords[i][1] === 'E')) { \r\n            upWords[i] = upWords[i][0] + upWords[i][1].toLowerCase() + upWords[i][2] + upWords[i].substr(3).toLowerCase() + ' ';\r\n          }\r\n          //otherwise lowercase all but the first character of the string\r\n          else { upWords[i] = upWords[i][0] + upWords[i].substr(1).toLowerCase() + ' ';}\r\n        }\r\n      }\r\n    }\r\n    return upWords.join(' ').trim();\r\n  };\r\n  return (\r\n    <IonPage>\r\n      <IonHeader>\r\n        <IonToolbar>\r\n          <div className='app-toolbar'>\r\n            <IonButtons className='app-title-button app-left-title-button'>\r\n              <IonButton routerLink='/dashboard'>\r\n                <IonIcon icon={arrowBack} className='app-icon'> </IonIcon>\r\n              </IonButton>\r\n            </IonButtons>\r\n            <IonTitle className='app-title'>Frost Date Finder</IonTitle>\r\n            <div className='app-title-button app-right-title-button'>\r\n              <IonButtons>\r\n                <IonButton onClick={e => {\r\n                  e.preventDefault();\r\n                  history.push('/dashboard/info');\r\n                }}>\r\n                  <IonIcon icon={helpCircle} className='app-icon'></IonIcon>\r\n                </IonButton>\r\n              </IonButtons>\r\n            </div>\r\n          </div>\r\n        </IonToolbar>\r\n      </IonHeader>\r\n      <IonContent>\r\n        <div className='app-page-container'>\r\n          <IonLoading\r\n            isOpen={loading}\r\n            onDidDismiss={() => setLoading(false)}\r\n            message={'Getting Data...'}\r\n          />\r\n          <IonPopover\r\n            isOpen={showPopover}\r\n            cssClass='station-popover'\r\n            onDidDismiss={e => setShowPopover(false)}\r\n          >\r\n            <h5 className='station-popover-header'>Station Information</h5>\r\n            <p>ID: {stationID.stationID}</p>\r\n            <p>Station Lat: {Math.abs(parseFloat(stationID.lat.toPrecision(4)))}&#176;{isLatPositive()}</p>\r\n            <p>Station Long: {Math.abs(parseFloat(stationID.long.toPrecision(5)))}&#176;{isLongPositive()}</p>\r\n            <p>Station Elevation: {stationID.elevation.toFixed(0)} feet</p>\r\n            <p>Local Elevation: {userElevation.toFixed(0)} feet</p>\r\n            <p>Distance: {Math.round(stationID.distance)} miles</p>\r\n            <IonButton onClick={() => setShowPopover(false)}>Close</IonButton>\r\n          </IonPopover>\r\n\r\n          <h1 className='app-page-header'>Your Frost Dates</h1> \r\n\r\n          <div className='station-container'>\r\n            <div className='station-col'>\r\n              <p>Station: {stringUpper()}, {stationID.state}</p>\r\n              <IonButton onClick={() => setShowPopover(true)}>More Information</IonButton>\r\n            </div>\r\n          </div>\r\n          <DisplayFrostDates\r\n            title='Light Freeze (32° F)'\r\n            springFrost={springFrostJulian.light}\r\n            fallFrost={fallFrostJulian.light}\r\n            frostFree={frostFreeJulian.light}\r\n          >\r\n          </DisplayFrostDates>\r\n          <DisplayFrostDates\r\n            title='Moderate Freeze (28° F)'\r\n            springFrost={springFrostJulian.moderate}\r\n            fallFrost={fallFrostJulian.moderate}\r\n            frostFree={frostFreeJulian.moderate}\r\n          >\r\n          </DisplayFrostDates>\r\n          <DisplayFrostDates\r\n            title='Severe Freeze (24° F)'\r\n            springFrost={springFrostJulian.severe}\r\n            fallFrost={fallFrostJulian.severe}\r\n            frostFree={frostFreeJulian.severe}\r\n          >\r\n          </DisplayFrostDates>\r\n        </div>\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nResultsPage.propTypes = {\r\n  match: PropTypes.any.isRequired,\r\n  history: PropTypes.any.isRequired\r\n};\r\n\r\nexport default ResultsPage;","C:\\Users\\aclos\\Documents\\oga2\\src\\utils\\getClosestStation.ts",["58"],"import stationsJSON from '../data/station_details.json';\r\nimport frostJSON from '../data/frost_data.json';\r\n\r\nexport interface Station {\r\n  station: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  elevation: number;\r\n  state: string;\r\n  city: string;\r\n  distance: number;\r\n}\r\n\r\nexport interface FrostData {\r\n  station: string;\r\n  fst_t24fp30: string;\r\n  fst_t28fp30: string;\r\n  fst_t32fp30: string;\r\n  lst_t24fp30: string;\r\n  lst_t28fp30: string;\r\n  lst_t32fp30: string;\r\n  gsl_t24fp30: string;\r\n  gsl_t28fp30: string;\r\n  gsl_t32fp30: string;\r\n  quality: string;\r\n}\r\n\r\nexport interface Coordinates {\r\n  lat: number;\r\n  long: number;\r\n}\r\n//create a stations list\r\nconst stations: Station[] = getWeatherStations();\r\n\r\n//get all weather stations from JSON file\r\nexport function getWeatherStations(): Station[] {\r\n  const stations: Station[] = stationsJSON.map( (data) => {\r\n    return {\r\n      station: data.id,\r\n      latitude: data.latitude,\r\n      longitude: data.longitude,\r\n      elevation: data.elevation,\r\n      state: data.state,\r\n      city: data.city,\r\n      distance: 999999\r\n    };\r\n  });\r\n  return stations;\r\n}\r\n\r\n//get all station frost data from JSON file\r\nexport function getFrostData(): FrostData[] {\r\n  const frostData: FrostData[] = frostJSON.map( (data) => {\r\n    return {\r\n      station: data.station,\r\n      fst_t28fp30: data['ann-tmin-prbfst-t28Fp30'],\r\n      fst_t24fp30: data['ann-tmin-prbfst-t24Fp30'],\r\n      fst_t32fp30: data['ann-tmin-prbfst-t32Fp30'],\r\n      lst_t24fp30: data['ann-tmin-prblst-t24Fp30'],\r\n      lst_t28fp30: data['ann-tmin-prblst-t28Fp30'],\r\n      lst_t32fp30: data['ann-tmin-prblst-t32Fp30'],\r\n      gsl_t24fp30: data['ann-tmin-prbgsl-t24Fp30'],\r\n      gsl_t28fp30: data['ann-tmin-prbgsl-t28Fp30'],\r\n      gsl_t32fp30: data['ann-tmin-prbgsl-t32Fp30'],\r\n      quality: data['quality']\r\n    };\r\n  });\r\n  return frostData;\r\n}\r\n\r\n// returns a list sorted by distance from the origin\r\nexport function getClosestStationList(origin: Coordinates): Station[] | null {\r\n  //get station distances\r\n  for (const station of stations) {\r\n    station.distance = getDistanceFromLatLongInKm(origin, {lat: station.latitude, long: station.longitude});\r\n  }\r\n  //sort stations by distance from user\r\n  stations.sort((a, b) => (a.distance > b.distance) ? 1 : -1);\r\n  return stations;\r\n}\r\n// uses Haversine formula, which gives the great-circle distance between two latitude-longitude pairs\r\n// will have some inaccuracy from assuming that earth is a perfect sphere\r\nexport const getClosestPoint = (origin: Coordinates, locations: Coordinates[]): Coordinates => {\r\n  let smallestDistance = Infinity;\r\n  let closestPosition: Coordinates = {\r\n    lat: 0,\r\n    long: 0\r\n  };\r\n  for (const location of locations) {\r\n    const distance: number = getDistanceFromLatLongInKm(origin, location);\r\n    if (distance < smallestDistance) {\r\n      smallestDistance = distance;\r\n      closestPosition = location;\r\n    }\r\n  }\r\n  return closestPosition;\r\n};\r\nconst convertDegreesToRadians = (degree: number) => {\r\n  return degree * (Math.PI / 180);\r\n}; \r\n// haversine formula: https://en.wikipedia.org/wiki/Haversine_formula\r\n// variable names a and c come from formula\r\n// source of code: https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula/21623206#21623206\r\nexport const getDistanceFromLatLongInKm = (pointA: Coordinates, pointB: Coordinates) => {\r\n  const earthRadiusInKM = 6371;\r\n  const latitudeDifferenceInRadians: number = convertDegreesToRadians(pointB.lat - pointA.lat);\r\n  const longitudeDifferenceInRadians: number = convertDegreesToRadians(pointB.long - pointA.long); \r\n  const a: number = \r\n      Math.sin(latitudeDifferenceInRadians / 2) * Math.sin(latitudeDifferenceInRadians / 2) +\r\n      Math.cos(convertDegreesToRadians(pointA.lat)) * Math.cos(convertDegreesToRadians(pointB.lat)) * \r\n      Math.sin(longitudeDifferenceInRadians / 2) * Math.sin(longitudeDifferenceInRadians / 2); \r\n  const c: number = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); \r\n  const distance: number = earthRadiusInKM * c;\r\n  return distance;\r\n};\r\n","C:\\Users\\aclos\\Documents\\oga2\\src\\components\\DeviceLocation.tsx",["59"],"import React, { useState } from 'react';\r\nimport { Geolocation, Geoposition } from '@ionic-native/geolocation/ngx';\r\nimport { IonButton, IonLoading, IonToast } from '@ionic/react';\r\nimport { getElevation } from '../utils/getUserElevation';\r\n\r\ninterface DeviceLocationProps {\r\n    onSubmit: (homeLat: number, homeLong: number, homeElev: number) => void;\r\n}\r\n\r\ninterface LocationError {\r\n    showError: boolean;\r\n    message?: string;\r\n}\r\n\r\nconst DeviceLocation: React.FC<DeviceLocationProps> = (props: DeviceLocationProps) => {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<LocationError>({ showError: false });\r\n  const [position, setPosition] = useState<Geoposition>();\r\n  const geolocation = new Geolocation();\r\n\r\n  let lat: number | null = 0;\r\n  let long: number | null = 0;\r\n  let elev: number | null = 0;\r\n\r\n  const getLocation = async () => {\r\n    const options = {  //Device GPS location settings\r\n      enableHighAccuracy: true,\r\n      timeout: 8000\r\n    };\r\n\r\n    setLoading(true);\r\n\r\n    try { //use the device geolocation to get coordinates and possibly elevation\r\n      const position = await geolocation.getCurrentPosition(options);\r\n      setPosition(position);\r\n      setLoading(false);\r\n      setError({ showError: false });\r\n      lat = position.coords.latitude;\r\n      long = position.coords.longitude;\r\n      \r\n      // get user's elevation: if none from device, call the API\r\n      if(!position.coords.altitude) {\r\n        const apiElev = await getElevation(lat, long);\r\n        elev = apiElev;\r\n      }\r\n      else { //otherwise, use device's location\r\n        elev = position.coords.altitude;\r\n      }\r\n\r\n      props.onSubmit(lat, long, elev || 0);\r\n    } catch (e) {\r\n      let msg = e.message;\r\n      if(msg === 'Timeout expired') {msg += '. Make sure your device location service is enabled.';}\r\n      setError({ showError: true, message: msg });\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <IonLoading\r\n        isOpen={loading}\r\n        onDidDismiss={() => setLoading(false)}\r\n        message={'Getting Location...'}\r\n      />\r\n      <IonToast\r\n        isOpen={error.showError}\r\n        onDidDismiss={() => setError({ message: '', showError: false })}\r\n        message={error.message}\r\n        duration={5000}\r\n      />\r\n      <IonButton onClick={getLocation}>Use My Location</IonButton>\r\n    </div>\r\n  );\r\n};\r\nexport default DeviceLocation;\r\n","C:\\Users\\aclos\\Documents\\oga2\\src\\components\\TextEntry.tsx",["60"],"//Source code for reg expression:\r\n//https://stackoverflow.com/questions/43872975/regular-expression-to-match-u-s-cities-allowing-certain-special-characters\r\nimport React, {useState} from 'react';\r\nimport './TextEntry.css';\r\nimport { IonInput, IonItem, IonButton, IonLoading, IonToast } from '@ionic/react';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport {getCityStateCoordinates, getZipCoordinates, LocationData} from '../utils/getCoordinates';\r\n\r\ninterface TextEntryProps {\r\n  onSubmit: (homeLat: number, homeLong: number, homeElev: number) => void;\r\n}\r\ninterface DataError {\r\n  showError: boolean;\r\n  message?: string;\r\n}\r\n\r\nconst TextEntry: React.FC<TextEntryProps> = (props: TextEntryProps) => { \r\n  const { control, handleSubmit } = useForm();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<DataError>({ showError: false });\r\n  \r\n  //called when the text entry is determined to be a zip code\r\n  const getZipCodeData = async (zip: string) => {\r\n    setLoading(true);\r\n    const locationData: LocationData = await getZipCoordinates(zip); //gets the lat/long associated with this zipcode\r\n    if (locationData.hasError) {\r\n      console.log(locationData.errorMessage);\r\n      alert('No results found for your entry. Please check the validity of your five digit zip code.');\r\n    }\r\n    else if (locationData.latitude && locationData.longitude && locationData.elevation) { \r\n      props.onSubmit(locationData.latitude, locationData.longitude, locationData.elevation);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  //called when the text entry is determined to be a city, state\r\n  const getCityStateData = async (cityName: string, stateCode: string) => {\r\n    setLoading(true);\r\n    const locationData: LocationData = await getCityStateCoordinates(cityName.toUpperCase(), stateCode.toUpperCase());\r\n        \r\n    if (locationData.hasError) {\r\n      console.log(locationData.errorMessage);\r\n      alert('No results found for your entry. Please check the validity of your city/state pair.');\r\n    }\r\n    else if (locationData.latitude && locationData.longitude && locationData.elevation) {\r\n      props.onSubmit(locationData.latitude, locationData.longitude, locationData.elevation);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  //perform input validation on the user entered text and then determine if it is a zipcode or city, state\r\n  const getValid = (data: any) => {\r\n    let textEntry = data.text;\r\n    const regExp = /^[a-zA-Z',.\\s-]+,[ ]?[A-Za-z]{2}$/; //regex to check if format is comma separated city state pair\r\n    let commaCount = 0;\r\n    let buildCityName = '';\r\n    let buildStateCode = '';\r\n    //catch an empty string being passed\r\n    if(textEntry === undefined || textEntry === '') {\r\n      alert('Error, input appears to be blank');\r\n    }\r\n    else {  //find the comma index and count(there should be only 0 or 1 of them)\r\n      let idx = 0;\r\n      for(let i = 0; i < textEntry.length; i++) {\r\n        if(textEntry.charAt(i) === ',') { \r\n          idx = i;\r\n          commaCount+=1;\r\n        }\r\n      } //get the city name and set state variable.\r\n      for(let i = 0; i < idx; i++) { buildCityName += textEntry.charAt(i); }\r\n\r\n      //remove spaces after comma\r\n      for(let i = idx + 1; i < textEntry.length; i++) {\r\n        if(textEntry.charAt(i) === ' ') {\r\n          textEntry = textEntry.substring(0, i) + textEntry.substring(i + 1);\r\n          i--;\r\n        }\r\n        // add the character to the state code\r\n        else { buildStateCode += textEntry.charAt(i).toUpperCase(); }\r\n      }\r\n      //determine if the entry is a city/state pair\r\n      if(regExp.test(textEntry) && commaCount === 1) {\r\n        textEntry = textEntry.replace(/,/g, ',+\\'');\r\n        getCityStateData(buildCityName, buildStateCode);\r\n      }\r\n      //determine if entry is a valid zip code\r\n      else if(!(isNaN(parseInt(textEntry))) && textEntry.length === 5) { getZipCodeData(textEntry); }\r\n      //check for more than two characters after comma\r\n      else {alert('Entry is invalid, please try again. You must enter a five digit zip code or a city name followed by a comma and the two letter postal abbreviation of the state.');}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-entry\">\r\n      <IonLoading\r\n        isOpen={loading}\r\n        onDidDismiss={() => setLoading(false)}\r\n        message={'Getting Data...'}\r\n      />\r\n      <IonToast\r\n        isOpen={true}\r\n        onDidDismiss={() => setError({ message: '', showError: false })}\r\n        message={error.message}\r\n        duration={3000} \r\n      />\r\n      <form onSubmit={handleSubmit(getValid)}>\r\n        <IonItem className=\"location-form\">\r\n          <Controller \r\n            as={<IonInput placeholder=\"Example: Corvallis, OR\" type=\"text\" />}\r\n            name=\"text\"\r\n            control={control}\r\n            onChangeName=\"onIonChange\"\r\n          />    \r\n        </IonItem>\r\n        <IonButton type=\"submit\">Submit</IonButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default TextEntry;\r\n","C:\\Users\\aclos\\Documents\\oga2\\src\\components\\DisplayFrostDates.tsx",["61"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { IonCard, IonCardHeader, IonCardTitle, IonCardContent } from '@ionic/react';\r\nimport { FrostDatesBySeverity } from '../pages/ResultsPage';\r\nimport './DisplayFrostDates.css';\r\n\r\n//these codes are defined in NOAA's \"NORMAL_ANN_documentation.pdf\"\r\nconst checkApiReturn = (dayNum: any) => {\r\n  if(dayNum === '-4444') {  //-4444 is the code for year round frost risk\r\n    return 'Year-Round Frost Risk';\r\n  }\r\n  else if (dayNum === '-6666') { //-6666 is the code for undefined parameter/insufficent data\r\n    return 'Too Infrequent to Estimate';\r\n  }\r\n  else if ( dayNum === '-7777') { //-7777 is the code for non-zero value that rounds to zero\r\n    return 'Nearly Zero, Rounded Down.';\r\n  }\r\n  else { return dayNum.toString(); }\r\n};\r\n\r\nconst DisplayFrostDates: React.FC<FrostDatesBySeverity> = ({title, springFrost, fallFrost, frostFree}) => { \r\n  return (\r\n    <div>\r\n      <IonCard className='frost-card'>\r\n        <IonCardHeader className='frost-card-header'>\r\n          <IonCardTitle className='frost-card-title'>{title}</IonCardTitle>\r\n        </IonCardHeader>\r\n        <IonCardContent className='frost-card-content'>\r\n          <div className='frost-card-col'>\r\n            <div className='frost-card-col-header card-item'>Last Freeze</div>\r\n            <div className='frost-card-col-header card-item'>First Freeze</div>\r\n            <div className='frost-card-col-header card-item'>Growing Season</div>\r\n          </div>\r\n          <div className='frost-card-col'>\r\n            <div className='card-item'>{checkApiReturn(springFrost)}</div>\r\n            <div className='card-item'>{checkApiReturn(fallFrost)}</div>\r\n            <div className='card-item'>{checkApiReturn(frostFree)} days</div>\r\n          </div>\r\n        </IonCardContent>\r\n      </IonCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nDisplayFrostDates.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  springFrost: PropTypes.string.isRequired,\r\n  fallFrost: PropTypes.string.isRequired,\r\n  frostFree: PropTypes.string.isRequired\r\n};\r\n\r\nexport default DisplayFrostDates;","C:\\Users\\aclos\\Documents\\oga2\\src\\utils\\getUserElevation.ts",[],"C:\\Users\\aclos\\Documents\\oga2\\src\\utils\\getCoordinates.ts",[],[],{"ruleId":"62","severity":1,"message":"63","line":185,"column":27,"nodeType":"64","messageId":"65","endLine":185,"endColumn":28},{"ruleId":"66","severity":1,"message":"67","line":104,"column":43,"nodeType":"68","messageId":"69","endLine":104,"endColumn":88},{"ruleId":"62","severity":1,"message":"70","line":18,"column":10,"nodeType":"64","messageId":"65","endLine":18,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":52,"column":27,"nodeType":"73","messageId":"74","endLine":52,"endColumn":30,"suggestions":"75"},{"ruleId":"71","severity":1,"message":"72","line":8,"column":33,"nodeType":"73","messageId":"74","endLine":8,"endColumn":36,"suggestions":"76"},"@typescript-eslint/no-unused-vars","'e' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'position' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["77","78"],["79","80"],{"messageId":"81","fix":"82","desc":"83"},{"messageId":"84","fix":"85","desc":"86"},{"messageId":"81","fix":"87","desc":"83"},{"messageId":"84","fix":"88","desc":"86"},"suggestUnknown",{"range":"89","text":"90"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"89","text":"91"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"92","text":"90"},{"range":"92","text":"91"},[2420,2423],"unknown","never",[350,353]]