[{"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\pages\\AboutPage.tsx":"1","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\components\\DisplayFrostDates.tsx":"2","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\utils\\getCoordinates.ts":"3","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\index.tsx":"4","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\pages\\DashboardPage.tsx":"5","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\components\\DeviceLocation.tsx":"6","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\utils\\getUserElevation.ts":"7","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\components\\TextEntry.tsx":"8","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\utils\\getClosestStation.ts":"9","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\pages\\ResultsPage.tsx":"10"},{"size":3555,"mtime":1606761521352,"results":"11","hashOfConfig":"12"},{"size":2100,"mtime":1606760048417,"results":"13","hashOfConfig":"12"},{"size":3675,"mtime":1606754352402,"results":"14","hashOfConfig":"12"},{"size":441,"mtime":1602977784464,"results":"15","hashOfConfig":"12"},{"size":816,"mtime":1606763140189,"results":"16","hashOfConfig":"12"},{"size":2445,"mtime":1606754352350,"results":"17","hashOfConfig":"12"},{"size":808,"mtime":1606754352403,"results":"18","hashOfConfig":"12"},{"size":5008,"mtime":1606758490454,"results":"19","hashOfConfig":"12"},{"size":4122,"mtime":1606754352400,"results":"20","hashOfConfig":"12"},{"size":9149,"mtime":1606754352396,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ks01mr",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":23,"warningCount":1,"fixableErrorCount":12,"fixableWarningCount":0,"source":null},"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\pages\\AboutPage.tsx",[],[],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\components\\DisplayFrostDates.tsx",["46"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { IonCard, IonCardHeader, IonCardTitle, IonCardContent } from '@ionic/react';\r\nimport { FrostDatesBySeverity } from '../pages/ResultsPage';\r\nimport './DisplayFrostDates.css';\r\n\r\n//these codes are defined in NOAA's \"NORMAL_ANN_documentation.pdf\"\r\nconst checkApiReturn = (dayNum: any) => {\r\n  if(dayNum === '-4444') {  //-4444 is the code for year round frost risk\r\n    return 'Year-Round Frost Risk';\r\n  }\r\n  else if (dayNum === '-6666') { //-6666 is the code for undefined parameter/insufficent data\r\n    return 'Too Infrequent to Estimate';\r\n  }\r\n  else if ( dayNum === '-7777') { //-7777 is the code for non-zero value that rounds to zero\r\n    return 'Nearly Zero, Rounded Down.';\r\n  }\r\n  else { return dayNum.toString(); }\r\n};\r\n\r\nconst DisplayFrostDates: React.FC<FrostDatesBySeverity> = ({title, springFrost, fallFrost, frostFree}) => { \r\n  return (\r\n    <div>\r\n      <IonCard className='frost-card'>\r\n        <IonCardHeader className='frost-card-header'>\r\n          <IonCardTitle className='frost-card-title'>{title}</IonCardTitle>\r\n        </IonCardHeader>\r\n        <IonCardContent className='frost-card-content'>\r\n          <div className='frost-card-col'>\r\n            <div className='frost-card-col-header card-item'>Last Freeze</div>\r\n            <div className='frost-card-col-header card-item'>First Freeze</div>\r\n            <div className='frost-card-col-header card-item'>Growing Season</div>\r\n          </div>\r\n          <div className='frost-card-col'>\r\n            <div className='card-item'>{checkApiReturn(springFrost)}</div>\r\n            <div className='card-item'>{checkApiReturn(fallFrost)}</div>\r\n            <div className='card-item'>{checkApiReturn(frostFree)} days</div>\r\n          </div>\r\n        </IonCardContent>\r\n      </IonCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nDisplayFrostDates.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  springFrost: PropTypes.string.isRequired,\r\n  fallFrost: PropTypes.string.isRequired,\r\n  frostFree: PropTypes.string.isRequired\r\n};\r\n\r\nexport default DisplayFrostDates;",[],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\utils\\getCoordinates.ts",[],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\index.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\pages\\DashboardPage.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\components\\DeviceLocation.tsx",["47"],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\utils\\getUserElevation.ts",[],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\components\\TextEntry.tsx",["48"],"//Source code:\r\n//https://stackoverflow.com/questions/43872975/regular-expression-to-match-u-s-cities-allowing-certain-special-characters\r\nimport React, {useState} from 'react';\r\nimport './TextEntry.css';\r\nimport { IonInput, IonItem, IonButton, IonLoading, IonToast } from '@ionic/react';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport {getCityStateCoordinates, getZipCoordinates, LocationData} from '../utils/getCoordinates';\r\n\r\ninterface TextEntryProps {\r\n  onSubmit: (homeLat: number, homeLong: number, homeElev: number) => void;\r\n}\r\ninterface DataError {\r\n  showError: boolean;\r\n  message?: string;\r\n}\r\n\r\nconst TextEntry: React.FC<TextEntryProps> = (props: TextEntryProps) => { \r\n  const { control, handleSubmit } = useForm();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<DataError>({ showError: false });\r\n  \r\n  //called when the text entry is determined to be a zip code\r\n  const getZipCodeData = async (zip: string) => {\r\n    setLoading(true);\r\n    const locationData: LocationData = await getZipCoordinates(zip); //gets the lat/long associated with this zipcode\r\n    if (locationData.hasError) {\r\n      console.log(locationData.errorMessage);\r\n      alert('No results found for your entry. Please check the validity of your five digit zip code.');\r\n    }\r\n    else if (locationData.latitude && locationData.longitude && locationData.elevation) { \r\n      props.onSubmit(locationData.latitude, locationData.longitude, locationData.elevation);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  //called when the text entry is determined to be a city, state\r\n  const getCityStateData = async (cityName: string, stateCode: string) => {\r\n    setLoading(true);\r\n    const locationData: LocationData = await getCityStateCoordinates(cityName.toUpperCase(), stateCode.toUpperCase());\r\n        \r\n    if (locationData.hasError) {\r\n      console.log(locationData.errorMessage);\r\n      alert('No results found for your entry. Please check the validity of your city/state pair.');\r\n    }\r\n    else if (locationData.latitude && locationData.longitude && locationData.elevation) {\r\n      props.onSubmit(locationData.latitude, locationData.longitude, locationData.elevation);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  //perform input validation on the user entered text and then determine if it is a zipcode or city, state\r\n  const getValid = (data: any) => {\r\n    let textEntry = data.text;\r\n    const regExp = /^[a-zA-Z',.\\s-]+,[ ]?[A-Za-z]{2}$/; //regex to check if format is comma separated city state pair\r\n    let commaCount = 0;\r\n    let buildCityName = '';\r\n    let buildStateCode = '';\r\n    //catch an empty string being passed\r\n    if(textEntry === undefined || textEntry === '') {\r\n      alert('Error, input appears to be blank');\r\n    }\r\n    else {  //find the comma index and count(there should be only 0 or 1 of them)\r\n      let idx = 0;\r\n      for(let i = 0; i < textEntry.length; i++) {\r\n        if(textEntry.charAt(i) === ',') { \r\n          idx = i;\r\n          commaCount+=1;\r\n        }\r\n      } //get the city name and set state variable.\r\n      for(let i = 0; i < idx; i++) { buildCityName += textEntry.charAt(i); }\r\n\r\n      //remove spaces after comma\r\n      for(let i = idx + 1; i < textEntry.length; i++) {\r\n        if(textEntry.charAt(i) === ' ') {\r\n          textEntry = textEntry.substring(0, i) + textEntry.substring(i + 1);\r\n          i--;\r\n        }\r\n        // add the character to the state code\r\n        else { buildStateCode += textEntry.charAt(i).toUpperCase(); }\r\n      }\r\n      //determine if the entry is a city/state pair\r\n      if(regExp.test(textEntry) && commaCount === 1) {\r\n        textEntry = textEntry.replace(/,/g, ',+\\'');\r\n        getCityStateData(buildCityName, buildStateCode);\r\n      }\r\n      //determine if entry is a valid zip code\r\n      else if(!(isNaN(parseInt(textEntry))) && textEntry.length === 5) { getZipCodeData(textEntry); }\r\n      //check for more than two characters after comma\r\n      else {alert('Entry is invalid, please try again. You must enter a five digit zip code or a city name followed by a comma and the two letter postal abbreviation of the state.');}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-entry\">\r\n      <IonLoading\r\n        isOpen={loading}\r\n        onDidDismiss={() => setLoading(false)}\r\n        message={'Getting Data...'}\r\n      />\r\n      <IonToast\r\n        isOpen={true}\r\n        onDidDismiss={() => setError({ message: '', showError: false })}\r\n        message={error.message}\r\n        duration={3000} \r\n      />\r\n      <form onSubmit={handleSubmit(getValid)}>\r\n        <IonItem className=\"location-form\">\r\n          <Controller \r\n            as={<IonInput placeholder=\"Example: Salem, OR\" type=\"text\" />}\r\n            name=\"text\"\r\n            control={control}\r\n            onChangeName=\"onIonChange\"\r\n          />    \r\n        </IonItem>\r\n        <IonButton type=\"submit\">Submit</IonButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default TextEntry;\r\n","C:\\Users\\John\\Documents\\GitHub\\oga\\src\\utils\\getClosestStation.ts",["49"],"C:\\Users\\John\\Documents\\GitHub\\oga\\src\\pages\\ResultsPage.tsx",["50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],{"ruleId":"74","severity":1,"message":"75","line":8,"column":33,"nodeType":"76","messageId":"77","endLine":8,"endColumn":36,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":18,"column":10,"nodeType":"81","messageId":"82","endLine":18,"endColumn":18},{"ruleId":"74","severity":1,"message":"75","line":52,"column":27,"nodeType":"76","messageId":"77","endLine":52,"endColumn":30,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":104,"column":43,"nodeType":"86","messageId":"87","endLine":104,"endColumn":88},{"ruleId":"88","severity":2,"message":"89","line":46,"column":50,"nodeType":"90","endLine":46,"endColumn":55},{"ruleId":"88","severity":2,"message":"91","line":46,"column":57,"nodeType":"90","endLine":46,"endColumn":64},{"ruleId":"88","severity":2,"message":"92","line":57,"column":35,"nodeType":"81","endLine":57,"endColumn":41},{"ruleId":"88","severity":2,"message":"93","line":57,"column":42,"nodeType":"81","endLine":57,"endColumn":44},{"ruleId":"94","severity":2,"message":"95","line":60,"column":6,"nodeType":"81","messageId":"96","endLine":60,"endColumn":9},{"ruleId":"94","severity":2,"message":"97","line":60,"column":11,"nodeType":"81","messageId":"96","endLine":60,"endColumn":15},{"ruleId":"94","severity":2,"message":"98","line":60,"column":17,"nodeType":"81","messageId":"96","endLine":60,"endColumn":26},{"ruleId":"88","severity":2,"message":"99","line":60,"column":46,"nodeType":"81","endLine":60,"endColumn":51},{"ruleId":"88","severity":2,"message":"92","line":110,"column":13,"nodeType":"81","endLine":110,"endColumn":19},{"ruleId":"88","severity":2,"message":"93","line":110,"column":20,"nodeType":"81","endLine":110,"endColumn":22},{"ruleId":"94","severity":2,"message":"100","line":124,"column":9,"nodeType":"81","messageId":"96","endLine":124,"endColumn":16,"fix":"101"},{"ruleId":"102","severity":2,"message":"103","line":124,"column":40,"nodeType":"104","messageId":"105","endLine":124,"endColumn":43,"fix":"106"},{"ruleId":"102","severity":2,"message":"103","line":125,"column":17,"nodeType":"107","messageId":"105","endLine":125,"endColumn":28,"fix":"108"},{"ruleId":"109","severity":2,"message":"110","line":125,"column":38,"nodeType":"111","messageId":"112","endLine":126,"endColumn":1,"fix":"113"},{"ruleId":"102","severity":2,"message":"103","line":128,"column":67,"nodeType":"104","messageId":"105","endLine":128,"endColumn":70,"fix":"114"},{"ruleId":"115","severity":2,"message":"116","line":133,"column":1,"nodeType":"81","messageId":"117","endLine":133,"endColumn":13,"fix":"118"},{"ruleId":"102","severity":2,"message":"103","line":133,"column":25,"nodeType":"107","messageId":"105","endLine":133,"endColumn":45,"fix":"119"},{"ruleId":"109","severity":2,"message":"110","line":133,"column":46,"nodeType":"111","messageId":"112","endLine":134,"endColumn":1,"fix":"120"},{"ruleId":"115","severity":2,"message":"116","line":134,"column":1,"nodeType":"81","messageId":"117","endLine":134,"endColumn":13,"fix":"121"},{"ruleId":"109","severity":2,"message":"110","line":134,"column":28,"nodeType":"111","messageId":"112","endLine":134,"endColumn":29,"fix":"122"},{"ruleId":"102","severity":2,"message":"103","line":139,"column":25,"nodeType":"104","messageId":"105","endLine":139,"endColumn":28,"fix":"123"},{"ruleId":"109","severity":2,"message":"110","line":140,"column":4,"nodeType":"124","messageId":"112","endLine":141,"endColumn":1,"fix":"125"},{"ruleId":"88","severity":2,"message":"126","line":156,"column":27,"nodeType":"81","endLine":156,"endColumn":31},{"ruleId":"79","severity":1,"message":"127","line":175,"column":27,"nodeType":"81","messageId":"82","endLine":175,"endColumn":28},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["128","129"],"@typescript-eslint/no-unused-vars","'position' is assigned a value but never used.","Identifier","unusedVar",["130","131"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","react/prop-types","'match' is missing in props validation","Property","'history' is missing in props validation","'match.params' is missing in props validation","'match.params.id' is missing in props validation","prefer-const","'lat' is never reassigned. Use 'const' instead.","useConst","'long' is never reassigned. Use 'const' instead.","'elevation' is never reassigned. Use 'const' instead.","'match.params.id.split' is missing in props validation","'upWords' is never reassigned. Use 'const' instead.",{"range":"132","text":"133"},"quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"134","text":"135"},"TemplateLiteral",{"range":"136","text":"137"},"semi","Missing semicolon.","ExpressionStatement","missingSemi",{"range":"138","text":"139"},{"range":"140","text":"135"},"indent","Expected indentation of 10 spaces but found 12.","wrongIndentation",{"range":"141","text":"142"},{"range":"143","text":"144"},{"range":"145","text":"139"},{"range":"146","text":"142"},{"range":"147","text":"139"},{"range":"148","text":"135"},"VariableDeclaration",{"range":"149","text":"139"},"'history.push' is missing in props validation","'e' is defined but never used.",{"messageId":"150","fix":"151","desc":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"150","fix":"156","desc":"152"},{"messageId":"153","fix":"157","desc":"155"},[5224,5227],"const",[5259,5262],"' '",[5282,5293],"'upWords: '",[5303,5303],";",[5425,5428],[5628,5640],"          ",[5652,5672],"'ignore word found!'",[5673,5673],[5675,5687],[5702,5702],[5907,5910],[5924,5924],"suggestUnknown",{"range":"158","text":"159"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"158","text":"160"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"161","text":"159"},{"range":"161","text":"160"},[350,353],"unknown","never",[2401,2404]]